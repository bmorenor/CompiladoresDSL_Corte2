package DSLMachineLearning.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Document_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Input_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new InputList_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new InputName_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new InputType_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new InputTypeName_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Inputs_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Layer_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new LayerList_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new LayerName_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new LayerParams_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Layers_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Model_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new ModelDescription_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new ModelFamily_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ModelFamilyName_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new ModelName_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new ModelType_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new ModelTypeName_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new NumberList_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new Output_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new OutputList_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new OutputName_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new OutputType_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new OutputTypeName_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new Outputs_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d3322d0L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b3aL), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b2aL), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b43L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b44L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b49L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b27L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b70L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b6dL), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b7bL), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b7cL), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b76L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b6aL), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b26L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b12L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x3e000331b47276c0L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b0fL), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b22L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b25L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b79L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b5fL), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b5cL), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b65L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b66L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b69L), MetaIdFactory.conceptId(0xc443d583ed614d79L, 0xbf612b6fba21dfcaL, 0x4c851a0d9d333b4bL)).seal();
}
