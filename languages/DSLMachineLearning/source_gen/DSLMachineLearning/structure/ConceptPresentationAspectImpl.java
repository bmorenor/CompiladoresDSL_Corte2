package DSLMachineLearning.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Document;
  private ConceptPresentation props_Input;
  private ConceptPresentation props_InputList;
  private ConceptPresentation props_InputName;
  private ConceptPresentation props_InputType;
  private ConceptPresentation props_InputTypeName;
  private ConceptPresentation props_Inputs;
  private ConceptPresentation props_Layer;
  private ConceptPresentation props_LayerList;
  private ConceptPresentation props_LayerName;
  private ConceptPresentation props_LayerParams;
  private ConceptPresentation props_Layers;
  private ConceptPresentation props_Model;
  private ConceptPresentation props_ModelDescription;
  private ConceptPresentation props_ModelFamily;
  private ConceptPresentation props_ModelFamilyName;
  private ConceptPresentation props_ModelName;
  private ConceptPresentation props_ModelType;
  private ConceptPresentation props_ModelTypeName;
  private ConceptPresentation props_Number;
  private ConceptPresentation props_NumberList;
  private ConceptPresentation props_Output;
  private ConceptPresentation props_OutputList;
  private ConceptPresentation props_OutputName;
  private ConceptPresentation props_OutputType;
  private ConceptPresentation props_OutputTypeName;
  private ConceptPresentation props_Outputs;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Document:
        if (props_Document == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Document");
          props_Document = cpb.create();
        }
        return props_Document;
      case LanguageConceptSwitch.Input:
        if (props_Input == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Input");
          props_Input = cpb.create();
        }
        return props_Input;
      case LanguageConceptSwitch.InputList:
        if (props_InputList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("InputList");
          props_InputList = cpb.create();
        }
        return props_InputList;
      case LanguageConceptSwitch.InputName:
        if (props_InputName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("InputName");
          props_InputName = cpb.create();
        }
        return props_InputName;
      case LanguageConceptSwitch.InputType:
        if (props_InputType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("InputType");
          props_InputType = cpb.create();
        }
        return props_InputType;
      case LanguageConceptSwitch.InputTypeName:
        if (props_InputTypeName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("InputTypeName");
          props_InputTypeName = cpb.create();
        }
        return props_InputTypeName;
      case LanguageConceptSwitch.Inputs:
        if (props_Inputs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Inputs");
          props_Inputs = cpb.create();
        }
        return props_Inputs;
      case LanguageConceptSwitch.Layer:
        if (props_Layer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Layer");
          props_Layer = cpb.create();
        }
        return props_Layer;
      case LanguageConceptSwitch.LayerList:
        if (props_LayerList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LayerList");
          props_LayerList = cpb.create();
        }
        return props_LayerList;
      case LanguageConceptSwitch.LayerName:
        if (props_LayerName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LayerName");
          props_LayerName = cpb.create();
        }
        return props_LayerName;
      case LanguageConceptSwitch.LayerParams:
        if (props_LayerParams == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LayerParams");
          props_LayerParams = cpb.create();
        }
        return props_LayerParams;
      case LanguageConceptSwitch.Layers:
        if (props_Layers == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Layers");
          props_Layers = cpb.create();
        }
        return props_Layers;
      case LanguageConceptSwitch.Model:
        if (props_Model == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Model");
          props_Model = cpb.create();
        }
        return props_Model;
      case LanguageConceptSwitch.ModelDescription:
        if (props_ModelDescription == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ModelDescription");
          props_ModelDescription = cpb.create();
        }
        return props_ModelDescription;
      case LanguageConceptSwitch.ModelFamily:
        if (props_ModelFamily == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ModelFamily");
          props_ModelFamily = cpb.create();
        }
        return props_ModelFamily;
      case LanguageConceptSwitch.ModelFamilyName:
        if (props_ModelFamilyName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ModelFamilyName");
          props_ModelFamilyName = cpb.create();
        }
        return props_ModelFamilyName;
      case LanguageConceptSwitch.ModelName:
        if (props_ModelName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ModelName");
          props_ModelName = cpb.create();
        }
        return props_ModelName;
      case LanguageConceptSwitch.ModelType:
        if (props_ModelType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ModelType");
          props_ModelType = cpb.create();
        }
        return props_ModelType;
      case LanguageConceptSwitch.ModelTypeName:
        if (props_ModelTypeName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ModelTypeName");
          props_ModelTypeName = cpb.create();
        }
        return props_ModelTypeName;
      case LanguageConceptSwitch.Number:
        if (props_Number == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Number");
          props_Number = cpb.create();
        }
        return props_Number;
      case LanguageConceptSwitch.NumberList:
        if (props_NumberList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NumberList");
          props_NumberList = cpb.create();
        }
        return props_NumberList;
      case LanguageConceptSwitch.Output:
        if (props_Output == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Output");
          props_Output = cpb.create();
        }
        return props_Output;
      case LanguageConceptSwitch.OutputList:
        if (props_OutputList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OutputList");
          props_OutputList = cpb.create();
        }
        return props_OutputList;
      case LanguageConceptSwitch.OutputName:
        if (props_OutputName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OutputName");
          props_OutputName = cpb.create();
        }
        return props_OutputName;
      case LanguageConceptSwitch.OutputType:
        if (props_OutputType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OutputType");
          props_OutputType = cpb.create();
        }
        return props_OutputType;
      case LanguageConceptSwitch.OutputTypeName:
        if (props_OutputTypeName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OutputTypeName");
          props_OutputTypeName = cpb.create();
        }
        return props_OutputTypeName;
      case LanguageConceptSwitch.Outputs:
        if (props_Outputs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Outputs");
          props_Outputs = cpb.create();
        }
        return props_Outputs;
    }
    return null;
  }
}
